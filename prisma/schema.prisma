generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model chats {
  chat_id    Int        @id @default(autoincrement())
  qr_code_id Int?
  status     String?    @default("pending") @db.VarChar(20)
  created_at DateTime?  @default(now()) @db.Timestamp(6)
  qr_codes   qr_codes?  @relation(fields: [qr_code_id], references: [qr_code_id], onDelete: Cascade, onUpdate: NoAction)
  messages   messages[]
}

model contact_requests {
  request_id      Int             @id @default(autoincrement())
  qr_code_id      Int?
  client_reason   String?         @db.VarChar(255)
  additional_info Json?
  timestamp       DateTime?       @default(now()) @db.Timestamp(6)
  qr_codes        qr_codes?       @relation(fields: [qr_code_id], references: [qr_code_id], onDelete: Cascade, onUpdate: NoAction)
  notifications   notifications[]
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model messages {
  message_id   Int       @id @default(autoincrement())
  chat_id      Int?
  sender_type  String?   @db.VarChar(20)
  message_text String?
  timestamp    DateTime? @default(now()) @db.Timestamp(6)
  chats        chats?    @relation(fields: [chat_id], references: [chat_id], onDelete: Cascade, onUpdate: NoAction)
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model notifications {
  notification_id   Int               @id @default(autoincrement())
  request_id        Int?
  notification_type String?           @db.VarChar(20)
  status            String?           @default("pending") @db.VarChar(20)
  timestamp         DateTime?         @default(now()) @db.Timestamp(6)
  contact_requests  contact_requests? @relation(fields: [request_id], references: [request_id], onDelete: Cascade, onUpdate: NoAction)
}

model qr_codes {
  qr_code_id       Int                @id @default(autoincrement())
  user_id          Int?
  message          String?
  options          Json?
  uuid             String?            @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  created_at       DateTime?          @default(now()) @db.Timestamp(6)
  chats            chats[]
  contact_requests contact_requests[]
  users            users?             @relation(fields: [user_id], references: [user_id], onDelete: Cascade, onUpdate: NoAction)
}

model users {
  user_id       Int        @id @default(autoincrement())
  name          String     @db.VarChar(50)
  email         String     @unique @db.VarChar(255)
  password_hash String     @db.VarChar(255)
  phone         String?    @db.VarChar(15)
  created_at    DateTime?  @default(now()) @db.Timestamp(6)
  qr_codes      qr_codes[]
}
